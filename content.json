{"pages":[],"posts":[{"title":"Hexo Icarus 테마 커스텀하기 - 3. post 탬플릿","text":"기본적인 글 생성과 자주 사용하는 탬플릿을 커스텀하는 방법에 대해 알아보려고 한다. 기본새 글을 작성할 때 hexo new post명을 입력하면 source/_posts하위에 새 포스트가 생기면서 글을 쓸 수 있다. 탬플릿 경로는 scaffolds/이고, 기본적으로 제공되는 탬플릿은 draft, page, post가 있다. 이중 post.md가 기본 탬플릿으로 사용되어 hexo new post명라고 치면 post 탬플릿으로 글이 생성된다. 다른 탬플릿을 사용할 경우에는 hexo 탬플릿이름 new post명으로 포스트를 생성하면 된다. 기본 설정된 탬플릿을 바꾸고 싶다면, blog/_config.yml에서 수정하면 된다. 123# Writing...default_layout: post 탬플릿 커스텀기본적인 post 탬플릿 양식은 아래와 같다. 12345---title: {{ title }}date: {{ date }}tags:--- 나는 썸네일, toc(글 목차), 필수로 사용하는 마크다운 구조를 추가할 것이다. tags : 글에 대한 태그들을 추가할 수 있다. toc : 글 상세페이지에서 글의 heading 태그들로 글 목차를 생성해주는 기능이다. thumbnail : themes/icarus/_config.yml에 기본적으로 썸네일을 보여주도록 설정되어있다. 나는 아예 기본 썸네일 경로를 추가해두었다. &lt;!-- more --&gt; : 이 주석을 추가하지 않을 경우, 글 목차에서 글 전체 내용이 노출된다. 글 목록에서는 일부만 보여지고, 자세히 보기 버튼이 생성되도록 하려면 주석을 추가해 주면 되고, 주석 위에 글을 쓰지 않을 경우는 알아서 글 전체가 노출된다. tag, category 추가 방법 12345678910111213141516171819202122232425262728293031---title: {{ title }}date: {{ date }}tags:thumbnail: images/thumb1.pngtoc: true---서론 영역 &lt;!-- more --&gt;&lt;br&gt;## **title**&lt;br&gt;&lt;hr&gt;## **title**&lt;br&gt;&lt;hr&gt; 수정한 내용을 저장하고 hexo new test1로 수정한 내용으로 파일이 잘 생성되는지 확인해본다. 잘 생성되는 것 같다.","link":"/2020/03/17/custom-theme-3/"},{"title":"Hexo Icarus 테마 커스텀하기 - 1. 레이아웃 수정","text":"테마 커스텀하기 1단계 : 내가 보기 편한 레이아웃을 만들며 정리한 내용이다. themes/icarus/_config.yml에서 수정 가능하다. 각 위젯별 이름은 type 에 명시가 되어있고, 배치는 position에서 left, rightf로만 수정이 가능하다.아예 숨기고 싶을 경우에는 해당 위젯 영역을 삭제하거나 주석처리하면 된다. 프로필 위젯1234567891011121314151617181920212223242526272829303132333435363738394041widgets: - # Widget name type: profile # Where should the widget be placed, left or right position: left # 이름 author: Yongui Lee # 프로필 제목 author_title: UI 개발 # 위치 location: Republic of Korea # Path or URL to the avatar to be shown in the profile widget avatar: 'images/avatar2.png' # Email address for the Gravatar to be shown in the profile widget gravatar: # 프로필 이미지 border-radius 여부 avatar_rounded: true # Path or URL for the follow button follow_link: 'https://github.com/yonguilee' # Links to be shown on the bottom of the profile widget social_links: Github: icon: fab fa-github url: 'https://github.com/yonguilee' # Facebook: # icon: fab fa-facebook # url: 'https://facebook.com' Twitter: icon: fab fa-twitter url: 'https://twitter.com/yongui9' # Dribbble: # icon: fab fa-dribbble # url: 'https://dribbble.com' # RSS: # icon: fas fa-rss # url: / - ... 나는 기본적인 설정만 하였고, Facebook, Dribble, RSS는 사용하지 않기에 주석처리하였다. 프로필 사진의 경우는 기본 프로필 사진(themes/icarus/source/images/avatar.png)에 덮어써도 되고, avatar부분에 경로를 적어주면 된다. 이미지는 themes/icarus/source/images에 추가하면 hexo generate으로 public폴더가 생성될 때 하위 images폴더에 자동 생성된다. 경로는 generate 되었을 때의 경로를 생각하여 추가하면 된다. 경로 예시 : images/avatar2.png 반영 결과 배치 수정내가 생각한 배치 left : profile, category, tag right : toc, recent_posts, archive 제외 : links, tagcloud 123456789101112131415161718192021222324252627282930313233343536373839404142widgets: ... # Widget name type: toc # Where should the widget be placed, left or right position: right- # # Widget name # type: links # # Where should the widget be placed, left or right # position: left # # Links to be shown in the links widget # links: # Hexo: 'https://hexo.io' # PPOffice: 'https://github.com/ppoffice'# - # Widget name type: category # Where should the widget be placed, left or right position: left- # # Widget name # type: tagcloud # # Where should the widget be placed, left or right # position: left# - # Widget name type: recent_posts # Where should the widget be placed, left or right position: right- # Widget name type: archive # Where should the widget be placed, left or right position: right- # Widget name type: tag # Where should the widget be placed, left or right position: left 주석 처리할 때에는 - 표시가 중복되지 않도록 하는 것이 중요하고, 작성된 순서대로 배치 순서가 결정되니 원하는 순서대로 작성하면 된다. 위젯 고정위젯이 위치한 양쪽 영역을 sidebar라고 부르고, 스크롤할 때 left/right 각 영역의 고정 여부를 설정할 수 있다.나는 둘다 true 설정을 해주었다. 1234567891011sidebar: # left sidebar settings left: # Whether the left sidebar is sticky when page scrolls # https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/make-a-sidebar-sticky-when-page-scrolls/ sticky: true # right sidebar settings right: # Whether the right sidebar is sticky when page scrolls # https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/make-a-sidebar-sticky-when-page-scrolls/ sticky: true","link":"/2020/03/17/custom-theme-1/"},{"title":"Vue로 UI 개발하기 - 1) 좋아요 컴포넌트(코드 비교)","text":"Vue를 사용하면서 ‘와, 이부분은 Vue로 쓰는게 훨씬 편하네’ 하는 등의 생각을 종종하곤 했지만, 역시나 완전히 내 것이 되려면 정리하는 것이 필요한 것 같다. 나는 코드가 다이나믹하게 줄어드는 변화를 말하려는 것이 아니다. Vue 유무에 따라 추가되는 코드도 있고, 아닌 코드도 분명히 있을 것이기에 코드 경량화를 목표로 하지 않았다. 조금 더 쉽고 다양하게 데이터와 마크업 구조를 연결시킬 수 있는 것이 가장 큰 장점인 것 같다. 뷰 확인 : https://yonguilee.github.io/without_vue_ui/component/like.html Vue 유무에 따른 코드 변화를 쉽게 비교하고자 만들어보았다.여러모로 간편한 사용이 가능해졌는데, 실제 코드는 어떤 차이가 있을까? 요소의 반복데이터를 받아와 데이터 만큼의 요소를 생성할 때 v-for를 사용하면 쉽게 가능하다. without Vueeach문 돌려서 조건에 맞게 삽입하는 코드 필요 1234&lt;!--[D] .user_thumb 최대 3개 노출 가능 --&gt;&lt;div class=\"user_thumb\"&gt; &lt;img src=\"\" alt=\"\"&gt;&lt;/div&gt; 1234567891011121314151617let userList = [ {name: '브라운', photo: 'images/img_user1.png'}, {name: '피자', photo: 'images/img_user2.png'}, {name: '천혜향', photo: 'images/img_user3.png'}, {name: '퐁듀', photo: 'images/img_user1.png'} ];//썸네일 업데이트 function updateUserThumb(){ if(userList){ ... $.each(userList, function(index, user){ //썸네일 생성 $('.user_info').prepend(`&lt;div class=\"user_thumb\"&gt;&lt;img src=\"${user.photo}\" alt=\"${user.name}의 프로필사진\"&gt;&lt;/div&gt;`); if(index==2) return false; //썸네일은 최대 3개까지 표시 }) } } with Vuev-for=&quot;user in userList.slice(0,'${maxIndex}')&quot; , 데이터 연결 필요 123&lt;div class=\"user_thumb\" v-for=\"user in userList.slice(0,`${maxIndex}`)\" :key=\"user.index\"&gt; &lt;img :src=\"user.photo\" :alt=\"`${user.name} 프로필 사진`\"&gt;&lt;/div&gt; 123456789101112export default { data() { return { userList: [ {name: '브라운', photo: 'images/img_user1.png'}, {name: '피자', photo: 'images/img_user2.png'}, {name: '천혜향', photo: 'images/img_user3.png'}, {name: '퐁듀', photo: 'images/img_user1.png'} ] }; }} 요소 숨김여부 표현 v-show / v-if 를 통해 html 속성으로 바로 제어가 가능하다. Vue를 사용하면서 조건문을 통해 상태를 확인해서 활성화 클래스를 추가하고, 텍스트를 변경해주는 등의 코드를 생략할 수 있다. 예시 1) without Vue변수 boolean 값에 따른 클래스 추가 &amp; 텍스트 변경 필요 12&lt;!--[D] .btn_like 클릭시 on 클래스 추가 &amp; '좋아요 취소'로 텍스트 변경 --&gt;&lt;button type=\"button\" class=\"btn btn_like\"&gt;좋아요&lt;/button&gt; 123456789101112let likeStatus = false;$('.btn_like').click(function(){ likeStatus = !likeStatus; if(likeStatus){//좋아요를 누른다면, $(this).addClass('on').text('좋아요 취소'); ... }else{ $(this).removeClass('on').text('좋아요'); ...} with Vuev-show 추가, @click 이벤트 추가 12&lt;button type=\"button\" class=\"btn like_off\" v-show=\"!likeStatus\" @click=\"changeStatus()\"&gt;좋아요&lt;/button&gt;&lt;button type=\"button\" class=\"btn like_on\" v-show=\"likeStatus\" @click=\"changeStatus()\"&gt;좋아요 취소&lt;/button&gt; 12345678910111213export default { data() { return { likeStatus: false }; }, methods: { changeStatus() { this.likeStatus=!this.likeStatus; ... } }} 예시 2)+) 현재 컴포넌트에 등록된 데이터를 참조하여 사용할 수 있다. without Vue조건문으로 상태 변화 코드 추가 필요 12&lt;!--[D] .user_thumb 이 3개일 경우 display:block 처리 --&gt;&lt;span class=\"txt_user_info\" style=\"display:none;\"&gt;외 &lt;span&gt;N&lt;/span&gt;명&lt;/span&gt; 12345678910111213...let maxIndex = 3, userList: [ {name: '브라운', photo: 'images/img_user1.png'}, {name: '피자', photo: 'images/img_user2.png'}, {name: '천혜향', photo: 'images/img_user3.png'}, {name: '퐁듀', photo: 'images/img_user1.png'} ];if(userList.length &gt; maxIndex){ $('.user_info .txt_user_info').show(); $('.user_info .txt_user_info span').text(totalNum - maxIndex);} with Vuev-show에 데이터 참조하여 조건 추가 가능 1&lt;span v-show=\"userList.length&gt;maxIndex\"&gt;외 {{userList.length-maxIndex}}명&lt;/span&gt; 12345678910111213export default { data() { return { maxIndex : 3, userList: [ {name: '브라운', photo: 'images/img_user1.png'}, {name: '피자', photo: 'images/img_user2.png'}, {name: '천혜향', photo: 'images/img_user3.png'}, {name: '퐁듀', photo: 'images/img_user1.png'} ] } }} 데이터 반응성데이터 값에 업데이트가 있을 경우, 이 업데이트 값이 반영되도록 하는 코드를 생략할 수 있다. without VueuserList 데이터에 변화가 있을 경우, 이를 반영하기 위한 updateLikeCount() 추가 필요 1&lt;span class=\"num\"&gt;0&lt;/span&gt; 123456789101112131415161718192021222324252627282930313233let likeStatus = false, myInfo = {name: '나다', photo: 'images/img_user1.png'}, userList = [ {name: '브라운', photo: 'images/img_user1.png'}, {name: '피자', photo: 'images/img_user2.png'}, {name: '천혜향', photo: 'images/img_user3.png'}, {name: '퐁듀', photo: 'images/img_user1.png'} ]; //좋아요 업데이트function updateLikeCount(){ $('.count_info .num').text(userList.length); ...}$('.btn_like').click(function(){ likeStatus = !likeStatus; if(likeStatus){//좋아요를 누른다면, $(this).addClass('on').text('좋아요 취소'); userList.push(myInfo);//내 정보 좋아요 업데이트 }else{ $(this).removeClass('on').text('좋아요'); let myIndex = userList.indexOf(myInfo); if(myIndex&gt;-1){//좋아요 취소한다면, userList.splice(myIndex,1); } } updateLikeCount(); //업데이트 해주기}); with VueuserList 데이터에 변화가 있을 경우, 자동으로 반영 1&lt;span class=\"num\"&gt;{{userList.length}}&lt;/span&gt; 1234567891011121314151617181920212223242526272829export default { data() { return { likeStatus: false, myInfo : {name: '나다', photo: 'images/img_user1.png'}, userList: [ {name: '브라운', photo: 'images/img_user1.png'}, {name: '피자', photo: 'images/img_user2.png'}, {name: '천혜향', photo: 'images/img_user3.png'}, {name: '퐁듀', photo: 'images/img_user1.png'} ] }; }, methods: { changeStatus() { this.likeStatus=!this.likeStatus; if(this.likeStatus){ //좋아요를 누른다면, this.userList.push(this.myInfo); }else{ let myIndex = this.userList.indexOf(this.myInfo); if(myIndex&gt;-1){//좋아요 취소한다면, this.userList.splice(myIndex,1); } } } }}","link":"/2020/03/24/vue-example-1-1/"},{"title":"Vue로 UI 개발하기 - 1) 좋아요 컴포넌트(튜토리얼1)","text":"앞으로 예제 몇개를 올릴 계획인데, 한번 쯤은 작업 flow를 끊어서 생각해보면 좋을 것 같아 컴포넌트 제작 과정을 상세하게 정리해보고자 한다. 목표 결과물 Vue 컴포넌트 기본 구조컴포넌트 작업을 할때 &lt;template&gt; 하위에 하나의 태그로 묶여있어야 한다. 123456789101112131415161718192021&lt;template&gt;&lt;!-- html --&gt; &lt;/template&gt;&lt;script&gt;export default { name: '컴포넌트 이름', data() { return { //변수 선언 및 초기값 설정 }; }, methods: { //함수 추가 }}&lt;/script&gt;&lt;style scoped&gt; //scoped 추가시 이 컴포넌트에만 아래 style이 적용됨(다른 곳에 영향없음)...&lt;/style&gt; error case) 다중으로 존재할 경우Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead. 1234&lt;template&gt; &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt;&lt;/template&gt; +) 추가 제어를 하면 멀티 루트도 가능하긴 하다. Multi root Vue.js 컴포넌트 만들기 사용할 Vue 문법 이중 중괄호 v-bind v-for v-show v-on 작업 흐름 기본 마크업 기능 구현 썸네일은 0 ~ 3개까지 노출 썸네일 3개 이상일 경우 ‘외 N명’ 노출 좋아요 버튼 토글 + 숫자 업데이트 기본 마크업12345678910111213141516171819202122&lt;template&gt; &lt;div class=\"ex ex_like\"&gt; &lt;div class=\"user_info\"&gt; &lt;div class=\"user_thumb\"&gt; &lt;img src=\"\" alt=\"\"&gt; &lt;/div&gt; &lt;div class=\"user_thumb\"&gt; &lt;img src=\"\" alt=\"\"&gt; &lt;/div&gt; &lt;div class=\"user_thumb\"&gt; &lt;img src=\"\" alt=\"\"&gt; &lt;/div&gt; &lt;span&gt;외 N명&lt;/span&gt; &lt;/div&gt; &lt;div class=\"count_info\"&gt; &lt;button type=\"button\" class=\"btn like_off\"&gt;좋아요&lt;/button&gt; &lt;button type=\"button\" class=\"btn like_on\"&gt;좋아요 취소&lt;/button&gt; &lt;span class=\"num\"&gt;0&lt;/span&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;","link":"/2020/03/24/vue-example-1-2/"},{"title":"Hexo Icarus 테마 커스텀하기 - 2. 헤더 , 푸터 + 디자인","text":"테마 커스텀하기 2단계 : 헤더, 푸터 영역과 디자인 커스텀하기 위해 찾아본 내용들이다. 헤더 영역파비콘 뿐만 아니라 헤더 영역의 기본 설정을 수정 할 수 있다. 경로 : themes/icarus/_config.yml 파비콘 수정 12# Path or URL to the website's iconfavicon: /images/logo.png 로고 수정 12# Path or URL to the website's logo to be shown on the left of the navigation bar or footerlogo: /images/logo.png 디자인key color랑 view를 좀 손보고 싶은 부분이 있는데, key color 부분의 css는 cdn으로 불러오는 것 같아서 조금 더 살펴 볼 예정.. 검색 레이어 커스텀 아이콘 변경 fontawesome을 사용한다. 개발자도구로 확인해보면 기본 닫기 아이콘은 fa-times-circle이고, 나는 fa-times로 수정할 것이다. 디자인 수정 내가 수정하려는 요소의 클래스를 검색해보니 다행히 검색 레이어에서만 사용되는 것 같다. 블로그 전반에 사용되는 카드와의 느낌을 맞추기 위해 border-radius 를 추가하고, 여백등을 조정해 보겠다. .serachbox-container에 border-radius 속성을 추가해야되는데, 검색해보니 다른 페이지에서도 사용되는 것 같다. 그래서 검색 레이어에서만 쓰이는 insight.css에서 수정하였다. 관련 CSS : themes/source/css/insight.css","link":"/2020/03/17/custom-theme-2/"},{"title":"Github 블로그 만들기 with Hexo","text":"One Note를 정리 노트로 사용했었는데, Github.io 블로그에 하나씩 옮겨보려 한다.Github pages 와 Hexo로 블로그를 만드는 과정에 대한 글이다. Github Pages 생성을 위한 저장소 생성github에서 블로그용 프로젝트를 생성한다. 저장소 명은 ‘유저명.github.io’ 로 생성하기 로컬에 설치 유저명이 아닌 것으로 만들경우, https://yonguilee.github.io/yongui2.github.io 이런식으로 만들어질 것이다. Hexo 설치123456$ npm install hexo-cli -g --save#hexo init 폴더명(root)$ hexo init blog$ cd blog$ npm install blog/ 하위 _config.yml에서 설정된 부분들을 개인에 맞게 커스텀 할 수 있다. 설정 파일 : _config.yml_config.yml는 기본 설정 파일이다.각 항목에 대한 자세한 설명은 Hexo Document &gt; Configuration에서 확인 가능하다. # Site 12345678# Sitetitle: yonggari's blogsubtitle: '척척박사가 될때까지'description: '반복해서 봐야 기억하는 나의 모자름을 보완하기 위한 수단'keywords: UI &amp; FE author: YongUi Leelanguage: kotimezone: '' 여기서 language는 테마의 기본 언어를 설정해주는 것으로, 아마.. 이 글을 읽는 사람은 모두 ko 라고 적겠지만, 다른 언어를 선택하고자 한다면 themes/languages에 있는 언어명 중에서 찾아 동일하게 적어주면 된다. # Deployment 1234# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: '' 다음과 같이 블로그로 사용할 저장소를 추가해 주면 된다. 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/yonguilee/yonggari.github.io.git branch: master 명령어기본 페이지 생성 12# hexo new [layout] 페이지명$ hexo new 페이지명 원하는 레이아웃(blog/scaffolds)으로 문서 source 파일(source/)을 생성한다.디폴트 레이아웃은 post.md 이다. 로컬 빌드 1$ hexo server 로컬에서 돌려보면 4000번 포트로 확인 가능하다. 배포위한 페이지 생성 1$ hexo generate 배포 1$ hexo deploy 간혹, 수정한 내용이 반영안되는 경우가 있는데 아래 명령어를 수행 후 다시 generate 후 deploy 하면 된다. 1$ hexo clean 테마 설치 (icarus)Hexo를 설치하면 기본테마는 landscape 이고, 마음에 들지 않을 경우 Hexo 테마에서 원하는 테마를 다운 받으면 된다. icarus Git repoicarus demo 테마 저장소 git clone 12cd blog git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 테마를 clone하게 되면 themes/ 하위에 icarus 폴더가 생성된다. 테마를 설치하면 icarus폴더 내에도 _config.yml 가 생성된다. 같은 설정파일이지만, 설정할 수 있는 부분이 다르니 잘 찾아서 활용하자. blog/_config.yml : 블로그 설정 파일 blog/themes/icarus/_config.yml : 테마 관련 설정 파일 blog/_config.yml 에서 테마 변경하기 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: icarus 에러Package cheerio is not installed icarus 설치 후 , hexo server를 실행했을 때 마주할 수 있는 에러이다. 12ERROR Package cheerio is not installed.ERROR Please install the missing dependencies from the root directory of your Hexo site. 간단하게, cheerio를 설치해주면 된다. 1npm install cheerio cheerio 설치 후 hexo server를 다시 수행하면 잘 빌드된 화면을 볼 수 있다. Deployer not found: git 배포를 위해 hexo deploy를 실행할 경우 마주할 수 있는 에러이다. 1ERROR Deployer not found: git hexo 환경에서 github 배포를 위한 모듈을 설치해주면 된다. 1$ npm install hexo-deployer-git --save","link":"/2020/03/16/start-blog/"},{"title":"UI 개발 1년차의 마크업 - Clean HTML & CSS","text":"모두에게 각자의 방식이 있고, 정답이 없음을 잘 알고 있다. 하지만 최대한 다수가 공감하고 읽기 쉬운 코드가 존재함은 분명한 것 같고, 나도 그런 코드를 작성하는 사람이 되고 싶다. 회사에서 Clean HTML &amp; CSS 에 대해 이야기를 나눠보기로 하여 그에 대한 나의 생각을 정리한 글이다. 내가 굳이 1년차라는 말을 붙인 이유는 내년 내후년이 되어 연차가 쌓여갈때 이 이슈에 대해서 다시 고민해보고 싶기 때문이고, 내년에 봤을 때는 추가할 내용이 많고 정정할 내용은 적었으면 좋겠다.(just my thinking~) Clean한 마크업은 무엇일까?“코드가 clean하다”라고 했을 때 나는 3가지 정도를 떠올린다. 깔끔한 포맷 가독성 &amp; 통일성 불필요한 것이 있지 않은가 여기서 포맷과 가독성 부분은 내가 일하는 곳에서 NHN Coding Convention을 따르고 있기 때문에 이를 얼마나 잘 준수하는가이다. 이 문서를 계속 반복해서 보고, 권장하는 방식으로 마크업하면 큰 어려움없이 마크업할 수 있다. 하지만 마크업을 계속 하다보면 나도 모르게 내가 보기 편하고, 내 생각이 들어갈 때가 있어서 내가 최근에 마크업한 것을 보면 컨벤션이 어긋나는 것도 분명 있을 것 같다.(하하…) 한 번 다시 봐야겠다. 포맷html 구조 같은 경우는 class 명까지 한번에 완벽하게 작성한 적은 없는 것 같다. 보고 또 보고.. 추가하는 코드들과 어울리는지 관계도 살펴보고.. 이제는 보편적인 UI 요소들은 경험해봐서 html구조와 class명에 대한 고민의 시간이 많이 줄어들었다. 들여쓰기Tab Size1 tab = 4 space로 설정하여 작업한다. 만약 기존 코드가 존재하고, 1 tab = 2 space로 되어있는 경우라면 기존 코드를 따라간다. 1 tab당 space 설정은 대부분의 에디터 환경설정에서 설정할 수 있을 것이다. VS Code의 경우 환경설정에서 editor.tabSize 를 검색하여 설정할 수 있다. Indenthtml을 작성할 때 들여쓰기 없이 모든 태그의 시작 위치가 같다면 구조 파악이 매우 어려울 것이다. 코딩 컨벤션에서는 중첩이 깊어질 때마다 들여쓰기를 하길 권장하고, 예외인 케이스를 기억해두면 되겠다. 예외 case &lt;ul&gt; , &lt;ol&gt; , &lt;dl&gt;의 자식요소인 &lt;li&gt; , &lt;dt&gt; , &lt;dd&gt; &lt;table&gt;의 자식요소 컨벤션에는 명시가 안되어있지만 나 스스로 보기 편하도록 증손자의 경우는 들여쓰기를 하고 있다. 굳이 이 컨벤션을 지킬 필요는 없고, 프로젝트 내에서 통일성만 있으면 될 것 같다. 빈줄코드가 길어질 수록 영역구분을 확실하게 하기 위해 1줄씩 공백을 만들어준다. 덩어리구분이라고 생각하면 쉬울 것 같다. Heading Structure내가 체크해보는 것 중 하나는 헤딩 태그들만 모아 봤을 때 문서 구조가 잘 보이는지이다. Chrome 확장프로그램인 Heading Map을 사용하면 쉽게 확인할 수 있다. 콘텐츠 제목이 디자인에 명시되는 경우도 있지만 아닌 경우도 자주 있기 때문에 컨텐츠 영역별로 헤딩 태그가 알맞게 작성되었는지 확인이 필요하다. 디자인에 명시되지 않은 콘텐츠 제목은 blind 텍스트로 제공한다. 가독성 &amp; 통일성네이밍 스타일BEM, SMACSS, OOCSS와 같은 여러 CSS 방법론들이 존재하는데, 어떤 것을 선택할지는 각자가 동료와 정하면 된다. 가장 중요한 것은 선택한 방법을 해당 프로젝트에서 계속 준수하며 사용하는가이다. 아마 네이밍에서 가장 오랜 시간을 보내게 될 지도 모르겠다. 상태요소의 활성화 클래스 정의시 다른 요소라도 같은 클래스를 준다. on, active 를 주로 활성화 표현을 위해 사용하는데, UI 요소별로 구분하는 사람들도 봤던 것 같다. 나 같은 경우는 혼용할 경우, 나중에 js로 제어하거나 수정하려고 찾을 때 헤깔리는 것을 방지하기 위해 통일한다. ex) 구매하기 버튼과 탭 메뉴의 활성화 클래스 123.btn_buy.on{ ... }....tab1.on{ ... } 주석주석을 추가하는 경우는 크게 2가지이다. 첫째, 영역 구분을 위핸 시작 주석 &amp; 끝 주석 둘째, 코드에 대한 설명 및 케이스 정리 다양한 케이스가 존재할 경우 케이스에 대한 정리를 주석으로 하는데 나중에 이어 받아 유지보수를 하게 될 동료를 생각한다면 필요하다. (내일의 나도 주석없이 기억못해낼 확률이 크다.) 12&lt;!-- 케이스별로 .icon에 클래스 추가 - .star : 별 / .moon : 달 / .sea : 바다 --&gt;&lt;span class=\"icon\"&gt;...&lt;/span&gt; 불필요한 요소 제거최종 산출물을 배포하기 전 마지막에 살펴본다. 여유가 있어 중간중간에 한번씩 살펴본다면 가장 좋겠지만 항상 일정은 허락해주지 않는 것 같다. 가끔 정신없이 배포하고 QA할때 다시 보면서 ‘내가 왜 이걸 그냥 뒀지..’하는 후회를 하기도 한다. Validator 돌리기내가 웹표준에 맞게 작성했는지 확인해 볼 수 있는 툴로 기본중의 기본이다. HTML Validator CSS Validator HTML, CSS 읽어보기간혹 빠르게 작업하거나 다 작업한 후에 전달받은 수정이나 변동사항들을 반영하다 보면 기존의 코드를 잊어버릴 때가 있다. 두 개를 동시에 보면서 하나씩 비교하면 시간이 오래 걸리기에 나는 html, css를 따로 보면서 구조랑 뷰를 떠올린다. 쓰이지 않은 class가 있지 않은가 과하게 감싸지 않았는가 (계층구조를 생각하며 작업하다보면 간혹 실수한다.) 테스트를 해보려고 작성한 코드를 지우는 것을 잊지 않았는가 삭제된 요소의 css가 남아있지는 않은가 중복된 css는 없는가 나 같은 경우는 css를 작성할 때 html 순서와 포함관계나 계층구조 순서를 따른다. 123&lt;ul class=\"lst_news\"&gt; &lt;li&gt;안녕하세요.. &lt;span class=\"txt_amount\"&gt;2&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; 1234567.lst_news{...}.lst_news li{...}.lst_news .txt_amount{...} /*맨 아래로 보내버린다.*/.lst_news li:before{...}.lst_news li:first-child{...}.lst_news li.is_active:before{...}.lst_news li.is_soldout:before{...} 속성을 추가할 때에도 코딩 컨벤션의 속성 순서를 따르는데, 이러한 순서를 중요시 하는 것은 유지보수의 편리함을 위해서이다. 예를 들어, css가 매우 길 때 font 관련 속성을 수정하고 싶다면 처음부터 읽는 것이 아니라 끝 쯔음에 있을 것을 생각하고 뒤에서부터 찾아올라간다. CSS 속성 선언 순서 (코딩컨벤션 63p) 레이아웃 box 배경 폰트 기타 123456789101112131415.tag{ float: left; position: relative; width: 166px; height: 185px; margin-right: 14px; margin-bottom: 19px; vertical-align: top; text-align: right; line-height: 18px; letter-spacing: -.5px; font-weight: 700; font-size: 12px; color: #222;} 다른 사람들은 어떻게 생각할까? Semantic Structure &amp; Naming Don’t Chain classes too much Avoid Global Selectors Use External CSS &amp; JS 모르겠고, 애매하고, 다른 사람의 생각이 궁금하다면 무조건 구글링이다. 다른 사람들도 비슷하게 생각하는 것 같다. 기억하자, Semantic , Undestandable, Future proof","link":"/2020/03/18/my-experience-in-markup/"}],"tags":[{"name":"Github 블로그","slug":"Github-블로그","link":"/tags/Github-%EB%B8%94%EB%A1%9C%EA%B7%B8/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","link":"/tags/Icarus/"},{"name":"vue","slug":"vue","link":"/tags/vue/"},{"name":"vue ui","slug":"vue-ui","link":"/tags/vue-ui/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"css","slug":"css","link":"/tags/css/"},{"name":"markup","slug":"markup","link":"/tags/markup/"},{"name":"UI","slug":"UI","link":"/tags/UI/"}],"categories":[{"name":"Dev","slug":"Dev","link":"/categories/Dev/"},{"name":"Vue","slug":"Vue","link":"/categories/Vue/"},{"name":"블로그 운영","slug":"Dev/블로그-운영","link":"/categories/Dev/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9A%B4%EC%98%81/"},{"name":"예제","slug":"Vue/예제","link":"/categories/Vue/%EC%98%88%EC%A0%9C/"},{"name":"HTML, CSS","slug":"Dev/HTML-CSS","link":"/categories/Dev/HTML-CSS/"}]}